=================
LIG_Tool (v1.03)
date: 2019.09.01
=================

Title:
LIG_Tool: a tool to extract ligands in PDB file

Author: 
Sheng Wang 

Contact email: 
realbigws@gmail.com 

--------------------------------------------------------



========
Install:
========

1. download the package

git clone https://github.com/realbigws/LIG_Tool
cd LIG_Tool/

--------------

2. compile

cd source_code/
	make
cd ../

--------------

3. update the package

git pull


--------------

4. update the ligand library

./update_Ligand_Utility.sh




======
Usage:
======

========================================================|
LIG_Tool  (version 1.03) [2019.09.01]                   |
    Extract ligands and chains from official PDB file   |
Usage:   ./LIG_Tool <-i input_pdb> [-o out_name]        |
         [-p chain_out_root] [-q ligand_out_root]       |
         [-n length_cut] [-d distance_cut] [-l log]     |
         [-O PC_out] [-T PC_type] [-t LG_type]          |
--------------------------------------------------------|
-i input_pdb : input original PDB file, e.g., 1col.pdb  |
-o out_name  : output file name. [default: input_name]  |
-p chain_out_root : chain output root [default: ./ ]    |
-q ligand_out_root: ligand output root [default: ./ ]   |
-n length_cut : chain length cutoff [default: 25 ]      |
-d distance_cut : ligand distance cutoff [default: 4.0] |
-l log : output log files (1) or not (0) [default: 0]   |
-O PC_root : binding residues in PC [default:null]      |
-T PC_type : CA+CB (-1), backbone+CB [0], full atom (1) |
-t LG_type : select ligand type. [ default: 'IOPNX']    |
========================================================|




================
Running example:
================

1. output ligand 

./LIG_Tool -i examples/1paz.pdb

----------------------------------

2. output binding information

./LIG_Tool -i examples/1paz.pdb -l 1

----------------------------------

3. output ligand to point-cloud (PC)

./LIG_Tool -i examples/1paz.pdb -O ./ 

----------------------------------

4. generate scPDB-like result

./LIG_Tool -i examples/10mh.pdb -l 1 -d 6.5 -O ./ -T 1 -t 'OPX'

----------------------------------

5. filter a given ligand

./LIG_Tool -i examples/1paz.pdb -l 1 -f examples/filt

----------------------------------

6. point-cloud form with ligand label

#-> dump ligands
./LIG_Tool -i examples/1paz.pdb -l 1

#-> label point-cloud at ligand-level
util/PDB_To_XYZ -i 1pazA.pdb -o 1pazA.xyz -a 1
util/PDB_To_XYZ -i 1paz_CU__0___.pdb -o 1paz_CU__0___.xyz -f 1
util/XYZ_ContResi 1pazA.xyz 1paz_CU__0___.xyz 6.5 1pazA.pc_xyz 1

or, use the util/multi_ligand_dump_chain.sh script

#-> alternative approach
echo "1pazA" > proc_list
util/multi_ligand_dump_chain.sh -i proc_list -o out_root -r ./ -d 6.5

The two files 'out_root/1pazA_atom.xyz' and '1pazA.pc_xyz' shall be the same.

Additionaly, we may also keep the additional info in the original point-cloud file:

#-> dump ligands in original point-cloud file
./LIG_Tool -i examples/1paz.pdb -l 1 -O ./ -T 1

#-> label point-cloud at ligand-level 
util/PDB_To_XYZ -i 1paz_CU__0___.pdb -o 1paz_CU__0___.xyz -f 1
util/XYZ_ContResi 1pazA.pc_xyz 1paz_CU__0___.xyz 4.0 1pazA.pcl_xyz 1


----------------------------------

7. conversion between PDB and XYZ

./LIG_Tool -i examples/1paz.pdb
util/PDB_To_XYZ -i 1pazA.pdb -o 1pazA.xyz -a 1
util/XYZ_To_PDB -i 1pazA.xyz -o 1pazA.pdb_pc -b 7

The two files '1pazA.pdb' and '1pazA.pdb_pc' shall be the same.


----------------------------------

8. generate residual/atom-level features
(according to P2Rank)

./LIG_Tool -i examples/1paz.pdb -l 1 -O ./ -T 1
util/XYZ_Gen_Feature 1pazA.pc_xyz 1pazA.pc_xyz_feat 10 1




